---
# This task is responsible for cloning the backend application's source code.
- name: Clone backend code
  # The 'git' module is used to interact with Git repositories.
  git:
    # 'repo_url' is a variable that should contain the URL of the Git repository
    # where the backend code is hosted (e.g., "https://github.com/your-org/yolo-backend.git").
    repo: "{{ repo_url }}"
    # 'app_dir' is a variable specifying the destination directory on the remote server
    # where the repository will be cloned (e.g., "/var/www/yolo-backend").
    dest: "{{ app_dir }}"
    # 'version: master' specifies that the 'master' branch of the repository should be cloned.
    # This ensures we get the latest stable version of the code.
    version: master

# This task builds the Docker image for the backend application.
- name: Build backend Docker image
  # The 'community.docker.docker_image' module is used to manage Docker images.
  community.docker.docker_image:
    # 'name: yolo-backend' assigns a name to the Docker image that will be built.
    name: yolo-backend
    # The 'build' block defines the context for building the Docker image.
    build:
      # 'path: "{{ app_dir }}"' specifies the build context, which is the directory
      # where the Dockerfile and other build-related files are located.
      path: "{{ app_dir }}"
      # 'dockerfile: Dockerfile' explicitly states the name of the Dockerfile to use.
      # By default, Docker looks for a file named 'Dockerfile' in the build context.
      dockerfile: Dockerfile

# This task runs the Docker container for the backend application.
- name: Run backend container
  # The 'community.docker.docker_container' module is used to manage Docker containers.
  community.docker.docker_container:
    # 'name: yolo-backend' assigns a name to the running container instance.
    name: yolo-backend
    # 'image: yolo-backend' specifies that the container should be created from
    # the 'yolo-backend' Docker image that we built in the previous task.
    image: yolo-backend
    # 'state: started' ensures that the container is running. If it's not running, it will be started.
    state: started
    # 'restart_policy: always' configures the container to automatically restart
    # if it stops for any reason, including host reboots.
    restart_policy: always
    # 'ports' maps ports from the host machine to the container.
    # In this case, it maps a host port (defined by 'backend_port' variable)
    # to port 3000 inside the container, where the backend application is expected to listen.
    ports:
      - "{{ backend_port }}:3000"
    # 'volumes' mounts host paths into the container.
    # This creates a bind mount, linking the application directory on the host ('app_dir')
    # to '/app' inside the container. This is useful for development or for persisting data.
    volumes:
      - "{{ app_dir }}:/app"
