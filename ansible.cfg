# ansible.cfg
# This file configures the behavior of Ansible. It can be placed in various locations,
# but for project-specific settings, it's typically placed in the root of the Ansible project.

[defaults]
# Specifies the inventory file(s) or directory where Ansible finds its managed hosts.
# For Vagrant, Ansible often generates a dynamic inventory.
# If you run `vagrant ssh-config` and then `ansible -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory -m ping all`,
# Ansible will use Vagrant's generated inventory.
# For simplicity in development, you might just rely on Ansible finding the default Vagrant inventory,
# or uncomment and specify it if needed.
# inventory = ./inventory/hosts

# Defines the path(s) where Ansible looks for roles.
# The 'roles' directory is relative to the location of this ansible.cfg file.
# This allows Ansible to find your 'backend' and 'frontend' roles.
roles_path = ./roles

# Sets the default remote user for SSH connections to managed hosts.
# For Vagrant virtual machines, the default user is 'vagrant'.
remote_user = vagrant

# Disables host key checking for SSH connections.
# This is generally recommended for development environments (like Vagrant VMs)
# where host keys might change frequently or are not critical for security.
# WARNING: Do NOT use `host_key_checking = False` in production environments,
# as it can expose you to man-in-the-middle attacks.
host_key_checking = False

# Enables pipelining, which reduces the number of SSH operations required for modules.
# This can significantly speed up playbook execution by sending multiple commands over a single SSH connection.
# Requires 'requiretty' to be disabled in sudoers on target hosts if using privilege escalation.
pipelining = True

# Specifies the private key file to use for SSH authentication.
# For Vagrant, the generated private key for the VM is located here.
# Ansible will automatically use this when connecting to the Vagrant VM.
# private_key_file = ./.vagrant/machines/default/virtualbox/private_key

# Controls the display of playbook output. 'yaml' is a common and readable format.
# stdout_callback = yaml

# Specifies the directory for fact caching. Facts are system information gathered from remote hosts.
# This can speed up subsequent playbook runs by reusing previously collected facts.
# fact_caching = jsonfile
# fact_caching_connection = ./fact_cache
# fact_caching_timeout = 86400 # Cache facts for 24 hours

# Sets the default forks value, controlling how many parallel processes Ansible will use.
# A higher number means more parallel connections and faster execution on multiple hosts.
# forks = 5

# Specifies the directory where log files will be written.
# log_path = ./ansible.log


[privilege_escalation]
# Enables privilege escalation (e.g., sudo) by default for tasks.
# Since many provisioning tasks (like apt-get install) require root privileges,
# enabling 'become' makes playbooks simpler as you don't need 'become: yes' on every task.
become = True

# Sets the method for privilege escalation. 'sudo' is common on Linux systems.
become_method = sudo

# Specifies the user to become (e.g., root). If not set, it defaults to root.
# become_user = root

# Asks for the privilege escalation password if required.
# In a Vagrant setup, sudo typically does not require a password for the 'vagrant' user.
# become_ask_pass = False


[ssh_connection]
# Optimizes SSH connections by multiplexing. This reuses SSH connections,
# which can significantly speed up subsequent tasks in a playbook run.
# It creates a persistent socket in the specified control path.
# This path should be unique per host to avoid conflicts.
ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no
# control_path = ~/.ansible/cp/%r@%h:%p

# Sets the SSH pipelining behavior explicitly for SSH connections.
# This should match the 'pipelining' setting in [defaults].
# If SSH pipelining is enabled, Ansible does not create temporary files for modules
# but instead pipes the module code directly to the remote interpreter.
# This requires 'requiretty' to be disabled in sudoers on target hosts.
# pipelining = True